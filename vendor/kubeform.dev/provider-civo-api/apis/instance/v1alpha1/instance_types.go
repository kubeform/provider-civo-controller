/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Instance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec,omitempty"`
	Status            InstanceStatus `json:"status,omitempty"`
}

type InstanceSpec struct {
	State *InstanceSpecResource `json:"state,omitempty" tf:"-"`

	Resource InstanceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type InstanceSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance's CPU cores
	// +optional
	CpuCores *int64 `json:"cpuCores,omitempty" tf:"cpu_cores"`
	// Timestamp when the instance was created
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// Instance's disk (GB)
	// +optional
	DiskGb *int64 `json:"diskGb,omitempty" tf:"disk_gb"`
	// The ID for the disk image to use to build the instance
	// +optional
	DiskImage *string `json:"diskImage,omitempty" tf:"disk_image"`
	// The ID of the firewall to use, from the current list. If left blank or not sent, the default firewall will be used (open to all)
	// +optional
	FirewallID *string `json:"firewallID,omitempty" tf:"firewall_id"`
	// A fully qualified domain name that should be set as the instance's hostname
	// +optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname"`
	// Initial password for login
	// +optional
	InitialPassword *string `json:"-" sensitive:"true" tf:"initial_password"`
	// The name of the initial user created on the server (optional; this will default to the template's default_username and fallback to civo)
	// +optional
	InitialUser *string `json:"initialUser,omitempty" tf:"initial_user"`
	// This must be the ID of the network from the network listing (optional; default network used when not specified)
	// +optional
	NetworkID *string `json:"networkID,omitempty" tf:"network_id"`
	// Add some notes to the instance
	// +optional
	Notes *string `json:"notes,omitempty" tf:"notes"`
	// Instance's private IP address
	// +optional
	PrivateIP *string `json:"privateIP,omitempty" tf:"private_ip"`
	// Instance's public IP address
	// +optional
	PublicIP *string `json:"publicIP,omitempty" tf:"public_ip"`
	// This should be either 'none' or 'create' (default: 'create')
	// +optional
	PublicIPRequired *string `json:"publicIPRequired,omitempty" tf:"public_ip_required"`
	// Instance's RAM (MB)
	// +optional
	RamMb *int64 `json:"ramMb,omitempty" tf:"ram_mb"`
	// The region for the instance, if not declare we use the region in declared in the provider
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// A fully qualified domain name that should be used as the instance's IP's reverse DNS (optional, uses the hostname if unspecified)
	// +optional
	ReverseDNS *string `json:"reverseDNS,omitempty" tf:"reverse_dns"`
	// The contents of a script that will be uploaded to /usr/local/bin/civo-user-init-script on your instance, read/write/executable only by root and then will be executed at the end of the cloud initialization
	// +optional
	Script *string `json:"script,omitempty" tf:"script"`
	// The name of the size, from the current list, e.g. g3.xsmall
	// +optional
	Size *string `json:"size,omitempty" tf:"size"`
	// Instance's source ID
	// +optional
	SourceID *string `json:"sourceID,omitempty" tf:"source_id"`
	// Instance's source type
	// +optional
	SourceType *string `json:"sourceType,omitempty" tf:"source_type"`
	// The ID of an already uploaded SSH public key to use for login to the default user (optional; if one isn't provided a random password will be set and returned in the initial_password field)
	// +optional
	SshkeyID *string `json:"sshkeyID,omitempty" tf:"sshkey_id"`
	// Instance's status
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// An optional list of tags, represented as a key, value pair
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The ID for the template to use to build the instance
	// +optional
	// Deprecated
	Template *string `json:"template,omitempty" tf:"template"`
}

type InstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceList is a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Instance CRD objects
	Items []Instance `json:"items,omitempty"`
}
