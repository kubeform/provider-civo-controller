/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Snapshot struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotSpec   `json:"spec,omitempty"`
	Status            SnapshotStatus `json:"status,omitempty"`
}

type SnapshotSpec struct {
	State *SnapshotSpecResource `json:"state,omitempty" tf:"-"`

	Resource SnapshotSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type SnapshotSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CompletedAt *string `json:"completedAt,omitempty" tf:"completed_at"`
	// If a valid cron string is passed, the snapshot will be saved as an automated snapshot,continuing to automatically update based on the schedule of the cron sequence provided.The default is nil meaning the snapshot will be saved as a one-off snapshot.
	// +optional
	CronTiming *string `json:"cronTiming,omitempty" tf:"cron_timing"`
	// +optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname"`
	// The ID of the instance to snapshot
	InstanceID *string `json:"instanceID" tf:"instance_id"`
	// This is a unqiue, alphanumerical, short, human readable code for the snapshot
	Name *string `json:"name" tf:"name"`
	// +optional
	NextExecution *string `json:"nextExecution,omitempty" tf:"next_execution"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	RequestedAt *string `json:"requestedAt,omitempty" tf:"requested_at"`
	// If true the instance will be shut down during the snapshot to ensure all filesare in a consistent state (e.g. database tables aren't in the middle of being optimisedand hence risking corruption). The default is false so you experience no interruptionof service, but a small risk of corruption.
	// +optional
	Safe *bool `json:"safe,omitempty" tf:"safe"`
	// +optional
	SizeGb *int64 `json:"sizeGb,omitempty" tf:"size_gb"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	TemplateID *string `json:"templateID,omitempty" tf:"template_id"`
}

type SnapshotStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SnapshotList is a list of Snapshots
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Snapshot CRD objects
	Items []Snapshot `json:"items,omitempty"`
}
