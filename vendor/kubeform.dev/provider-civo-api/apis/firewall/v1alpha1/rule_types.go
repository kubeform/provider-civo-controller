/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Rule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSpec   `json:"spec,omitempty"`
	Status            RuleStatus `json:"status,omitempty"`
}

type RuleSpec struct {
	State *RuleSpecResource `json:"state,omitempty" tf:"-"`

	Resource RuleSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type RuleSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address of the other end (i.e. not your instance) to affect, or a valid network CIDR (defaults to being globally applied, i.e. 0.0.0.0/0)
	// +optional
	Cidr []string `json:"cidr,omitempty" tf:"cidr"`
	// Will this rule affect ingress traffic
	// +optional
	Direction *string `json:"direction,omitempty" tf:"direction"`
	// The end of the port range (this is optional, by default it will only apply to the single port listed in start_port)
	// +optional
	EndPort    *string `json:"endPort,omitempty" tf:"end_port"`
	FirewallID *string `json:"firewallID" tf:"firewall_id"`
	// A string that will be the displayed name/reference for this rule (optional)
	// +optional
	Label *string `json:"label,omitempty" tf:"label"`
	// The protocol choice from tcp, udp or icmp (the default if unspecified is tcp)
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// The region for this rule
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// The start of the port range to configure for this rule (or the single port if required)
	// +optional
	StartPort *string `json:"startPort,omitempty" tf:"start_port"`
}

type RuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RuleList is a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Rule CRD objects
	Items []Rule `json:"items,omitempty"`
}
